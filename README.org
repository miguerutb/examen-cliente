* Examen DWEC Primera Evaluación
** Archivos del examen
Se proporciona el esqueleto del archivo ~coches.html~ sobre el que se ejecutará la aplicación a desarrollar.
   
Se incluye en el repositorio un conjunto de archivos que se utilizarán para realizar *tests*. Dichos tests se podrán utilizar para comprobar si el examen se ha realizado correctamente. Los tests se podrán ejecutar el número de veces que sea necesario.

Los tests tienen asignada una puntuación de *8 puntos*. Los otros 2 puntos serán asignados por el profesor en función de la calidad del código (claridad, optimización, etc.)

** Preparación
1. Abrir un terminal.
2. Clonar el repositorio al equipo local mediante ~git clone~.
3. Acceder a la carpeta del repositorio.
4. Ejecutar el comando ~npm install~. Este comando instalará todas las librerías de Node necesarias para ejecutar los tests.
5. Ejecutar el comando ~npm run test~ para lanzar los *tests*. Este comando podrá ejecutarse tantas veces como sea necesario. Por pantalla se mostrarán los tests que se pasan y los que no, de manera que se tendrá información sobre las acciones que hay que realizar.

** Tareas a realizar
*** Lógica de la aplicación: fichero ~js/gestionCoches.js~
    Crea un fichero en la ruta ~js/gestionCoches.js~ del repositorio. El fichero deberá contener el siguiente código:
    - Variable global ~coches~, inicializada a un *array vacío*. Esta variable almacenará la lista de coches guardados por la aplicación.
    - ~Coche~ - *Función constructora* que se encargará de crear un objeto *coche*. Esta función devolverá un objeto de tipo *coche*. La función tendrá *tres parámetros*: ~marca~, ~color~ y ~fechaMatricula~. El *objeto* creado a partir de este constructor deberá tener las siguientes propiedades:
      - ~marca~ - Propiedad que almacenará la marca del coche
      - ~color~ - Propiedad que almacenará el color del coche
      - ~fechaMatricula~ - Propiedad que almacenará la fecha de matriculación del coche.
      - *¡IMPORTANTE!* La fecha se pasará en formato ~aaaa-mm-dd~ a la función constructora, pero el campo ~fechaMatricula~ deberá almacenar la fecha en formato ~timestamp~. Por ejemplo, si se pasa el parámetro ~2022-03-07~ a la función constructora, la propiedad ~fechaMatricula~ deberá almacenar ~1646611200000~.
      - ~mostrarFechaMatricula~ - *Función* que devolverá la fecha en *formato localizado* en forma de cadena de texto (función ~toLocaleDateString("es")~, incluyendo el código del idioma). Por ejemplo, si ~fechaMatricula=1646671122000~, la función deberá devolver: ~7/3/2022~.
    - ~listarCoches~ - Función *sin parámetros* que deberá devolver la lista de coches.
    - ~anyadirCoche~ - Función de *un parámetro* que añadirá el objeto de tipo ~coche~ pasado como parámetro a la variable global ~coches~. El coche se debe añadir al final del array.
    
    Se deben *exportar* las funciones ~Coche~, ~listarCoches~ y ~anyadirCoche~.

*** Página HTML de la aplicación: fichero ~coches.html~
    Se debe modificar el fichero ~coches.html~ para que incluya el siguiente contenido: 
    - Un *formulario* dentro de la capa ~div#creacion~. El formulario debe tener un atributo ~id~ con valor ~anyadircoche~. El formulario debe contener:
      - Un campo de texto con ~id~ y ~name~ con valor ~marca~
      - Un campo de texto con ~id~ y ~name~ con valor ~color~
      - Un campo de *tipo fecha* con ~id~ y ~name~ con valor ~fechamatricula~
      - Un botón de tipo ~submit~ con texto ~Crear~.
    
    Además, se deberá *importar* el fichero ~js/gestionCochesWeb.js~ como script de tipo ~module~.
    
*** Lógica web de la aplicación: fichero ~js/gestionCochesWeb.js~
    Se debe crear un fichero en la ruta ~js/gestionCochesWeb.js~ del repositorio. El fichero deberá *importar la lógica de la aplicación* (archivo ~js/gestionCoches.js~).

El fichero debe tener el siguiente código:
    - Función ~repintar~ - Esta función *sin parámetros* se encargará de *mostrar el listado de coches* en la capa ~div#coches~ del archivo HTML. Generará la siguiente *estructura HTML* para *cada objeto coche* de la lista:
      #+begin_src html
        <div class="coche">
          <dl>
            <dt>Marca</dt>
            <dd>MARCA</dd>
            <dt>Color</dt>
            <dd>COLOR</dd>
            <dt>Fecha de matriculación</dt>
            <dd>FECHA_MATRICULACION</dd>
          </dl>
        </div>

        <!-- Ejemplo:

             <div class="coche">
               <dl>
                 <dt>Marca</dt>
                 <dd>Seat</dd>
                 <dt>Color</dt>
                 <dd>Blanco</dd>
                 <dt>Fecha de matriculación</dt>
                 <dd>7/5/2020</dd>
               </dl>
             </div>

             -->

      #+end_src
      Donde se sustituirán los textos en mayúsculas por los datos del coche correspondiente.
    - Función ~anyadirCocheWeb~ - Esta función se utilizará como *manejadora de eventos* del formulario ~#creacion~ del archivo HTML. Se encargará de:
      - Prevenir el comportamiento por defecto del formulario.
      - *Crear* un objeto ~coche~ a partir de los datos del formulario.
      - *Añadir* el objeto creado a la lista de coches.
      - Llamar a la función ~repintar~ para mostrar el listado actualizado de coches.
    - Código necesario para *añadir la función* ~anyadirCocheWeb~ como *manejadora* del evento ~submit~ del formulario ~#anyadircoche~.

** Formato de la entrega
Se debe realizar la entrega subiendo el repositorio a GitHub mediante ~git push~.
